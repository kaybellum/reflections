What happens when you initialize a repository? Why do you need to do it?

The "git init" command creates a git repository within the working directory. 
When this command is employed, a hidden folder - ".git" - is created within the
current directory. Note that "git init" will not create any commits; it is up 
to you make the first commit to the newly-established git repository.


How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The "working directory" is just another name for the folder on your computer 
that you're currently accessing either via the terminal emulator or a GUI-based
browswer. A "git repository" is established after the "git init" command has 
been employed to initialize a version control system for a particular working 
directory. Finally, the "staging area" is a queue of files to be added to your 
next commit; this feature is beneficial because it gives you a means of 
choosing which files to incoporate in your next commit. 


How can you use the staging area to make sure you have one commit per logical 
change?

Use the "git add" command to add only the file you have just worked on to the 
staging area. Now, when you invoke "git commit", only this file will be 
updated. Running "git status" will display the name of the file that has been 
modified in the working directory and is ready to be committed. 


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are good if you want to have alternate versions of your code - for 
instance, an easier version of a game, one in a foreign language, etc. 


What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?

The merge feature allows the developer to work on features for a particular 
program in isolation of the main, currently functional prototype. Once the 
developer finishes working on said features, he can merge the two branches, 
incorporating the features of the separate branch into the functional program. 


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges 
manually?

The pros of automatic merging in Git include conflict resolution. Conflict 
resolution can also be a con because it's not the most straight-forward 
process? (not really sure on this one...)


