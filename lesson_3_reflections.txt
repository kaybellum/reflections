When would you want to use a remote repository rather than keeping all your 
work local?

A remote repository would be helpful in the event that you want to collaborate 
with other people on a project; remotes are also beneficial as a backup I'd 
imagine.


Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

A collaborator might introduce a change on the remote repository that you don't
approve of. Also, you may end up with far too many unnecessary commits. 


Describe the differences between forks, clones, and branches. When would you 
use one instead of another?

Branches are made within a repository. By cloning, a repository is pulled off 
of the remote Github server and copied to your local drive. Clones can also be 
made of existing local repositories to another destination on your local drive 
or another local drive. Forks occur only on the Github server; they allow you 
to take someone else's work and create a separate copy of it so that you can 
make modifications independently of what they're doing. 


What is the benefit of having a copy of the last known state of the remote 
stored locally?

By storing the last-known state of a remote locally, you will be able to make 
changes to it whilst other collaborators make their own changes. You can then 
merge your changes with theirs once you are all satisfied with your progress. 


How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?

I guess I would use something like Google Docs or Dropbox. Each of these 
systems require less of learning curve to get up and running; there is no need 
to utilize the command line in either case. So, in this way, I suppose these 
systems are easier than Git/GitHub. However, neither Google Docs nor Dropbox 
allows you to decide when to save states (make "commits"); they don't provide 
the level of control that Git and GitHub do and are not as capable for handling
developers' projects.  


When would you want to make changes in a separate branch rather than directly 
in master? What benefits does each approach have?

Making changes in a separate branch is beneficial when you'd like to add a new 
feature, but you want to test it out before committing it to the master. This 
approach will prevent you from ruining all of the work that has been done in 
the master branch. 